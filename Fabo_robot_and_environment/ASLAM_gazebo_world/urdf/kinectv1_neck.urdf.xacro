<?xml version="1.0"?>
<robot name="kinectv1_neck" xmlns:xacro="http://ros.org/wiki/xacro">
  
  <xacro:property name="cam_px" value="-0.087" />
<!--	<xacro:property name="cam_py" value="-0.0125" /> Y varies for different configurations. get sets in sensors_urdf -->
	<xacro:property name="cam_pz" value="0.2870" />
	<xacro:property name="cam_or" value="0" />
	<xacro:property name="cam_op" value="0" />
	<xacro:property name="cam_oy" value="0" />
  <xacro:property name="kinect_cam_py" value="0.0"/>

  <!-- Parameterised in part by the values in turtlebot_properties.urdf.xacro -->
  <xacro:macro name="sim_3dcamera">
    <gazebo reference="camera_link">  
      <sensor type="depth" name="camera">
        <always_on>true</always_on>
        <update_rate>20.0</update_rate>
        <camera>
          <horizontal_fov>${60.0*M_PI/180.0}</horizontal_fov>
          <image>
            <format>B8G8R8</format>
            <width>640</width>
            <height>480</height>
          </image>
          <clip>
            <near>0.05</near>
            <far>8.0</far>
          </clip>
        </camera>
        <plugin name="kinect_camera_controller" filename="libgazebo_ros_openni_kinect.so">
          <cameraName>camera</cameraName>
          <alwaysOn>true</alwaysOn>
          <updateRate>10</updateRate>
          <imageTopicName>rgb/image_raw</imageTopicName>
          <depthImageTopicName>depth/image_raw</depthImageTopicName>
          <pointCloudTopicName>depth/points</pointCloudTopicName>
          <cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
          <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
          <frameName>camera_depth_optical_frame</frameName>
          <baseline>0.1</baseline>
          <distortion_k1>0.0</distortion_k1>
          <distortion_k2>0.0</distortion_k2>
          <distortion_k3>0.0</distortion_k3>
          <distortion_t1>0.0</distortion_t1>
          <distortion_t2>0.0</distortion_t2>
          <pointCloudCutoff>0.4</pointCloudCutoff>
        </plugin>
      </sensor>
    </gazebo>
  </xacro:macro>

  <!-- kinect 。我第一篇论文中的仿真中，用的这个，即macro sensor_kinect -->
  <xacro:include filename="$(find ASLAM_gazebo_world)/urdf/kinect.urdf.xacro"/>
  <!-- kinectv1 huxianxu版本。我第一篇论文中的仿真中，没有用到-->
  <xacro:macro name="kinectv1" params="parent">
      <joint name="camera_rgb_joint" type="fixed">
          <origin xyz="0 ${kinect_cam_py} 0.0" rpy="0 0 0"/>
          <!-- <origin xyz="${cam_px} ${kinect_cam_py} ${cam_pz}" rpy="${cam_or} ${cam_op} ${cam_oy}"/> -->
          <!-- <xacro:property name="cam_px" value="-0.087" />
          <xacro:property name="cam_pz" value="0.2870" />
          <xacro:property name="cam_or" value="0" />
          <xacro:property name="cam_op" value="0" />
          <xacro:property name="cam_oy" value="0" /> -->
        <parent link="${parent}"/>
        <child link="camera_rgb_frame" />
      </joint>
      <link name="camera_rgb_frame"/>

      <joint name="camera_rgb_optical_joint" type="fixed">
        <origin xyz="0 0 0" rpy="${-M_PI/2} 0 ${-M_PI/2}" />
        <parent link="camera_rgb_frame" />
        <child link="camera_rgb_optical_frame" />
      </joint>
      <link name="camera_rgb_optical_frame"/>

      <joint name="camera_joint" type="fixed">
        <origin xyz="-0.031 ${-kinect_cam_py} -0.016" rpy="0 0 0"/>
        <parent link="camera_rgb_frame"/>
        <child link="camera_link"/>
      </joint>  
        <link name="camera_link">
        <visual>
          <origin xyz="0 0 0" rpy="0 0 ${M_PI/2}"/>
          <geometry>
            <mesh filename="package://ASLAM_gazebo_world/urdf/kinect.dae"/>
          </geometry>
        </visual>
        <collision>
          <origin xyz="0.0 0.0 0.0" rpy="0 0 0"/>
          <geometry>
            <box size="0.07271 0.27794 0.073"/>
          </geometry>
        </collision>
        <inertial>
          <mass value="1e-5" /> <!-- 0.564 -->
          <origin xyz="0 0 0" />
          <inertia ixx="0.003881243" ixy="0.0" ixz="0.0"
                    iyy="0.000498940" iyz="0.0"
                    izz="0.003879257" />
        </inertial>
      </link>

        <!-- The fixed joints & links below are usually published by static_transformers launched by the OpenNi launch 
            files. However, for Gazebo simulation we need them, so we add them here.
            (Hence, don't publish them additionally!) -->
      <joint name="camera_depth_joint" type="fixed">
        <origin xyz="0 ${2 * -kinect_cam_py} 0" rpy="0 0 0" />
        <parent link="camera_rgb_frame" />
        <child link="camera_depth_frame" />
      </joint>
      <link name="camera_depth_frame"/>

      <joint name="camera_depth_optical_joint" type="fixed">
        <origin xyz="0 0 0" rpy="${-M_PI/2} 0 ${-M_PI/2}" />
        <parent link="camera_depth_frame" />
        <child link="camera_depth_optical_frame" />
      </joint>
      <link name="camera_depth_optical_frame"/>
      
      <!-- Kinect sensor for simulation -->
      <xacro:sim_3dcamera/>
  </xacro:macro>


  <!-- 添加脖子 -->
  <xacro:macro name="kinectv1_neck" params="parent camera_offset_x camera_offset_y camera_offset_z">
        <!-- <joint name="joint_neck_1" type="revolute">  -->
        <joint name="joint_neck_1" type="continuous">
          <origin xyz="${camera_offset_x} ${camera_offset_y} ${camera_offset_z}" rpy="0 0 0"/>
          <parent link="${parent}"/>
          <child link="platform_1"/>
          <axis xyz="0 0 1"/>
          <limit effort="300" velocity="1" lower="-3.14" upper="3.14"/>  
          <!-- 1.57  M_PI-->
          <dynamics damping="0.1" friction="0.5"/><!-- <dynamics damping="50" friction="1"/> -->
        </joint>

        <link name="platform_1">
          <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
              <cylinder length="0.001" radius="0.01"/>
            </geometry>
          </collision>
          <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
              <cylinder length="0.001" radius="0.01"/>
            </geometry>
          </visual>
          <inertial>
            <mass value="1e-5" /> 
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
          </inertial>
        </link>

        <joint name="joint_neck_2" type="fixed">
          <origin xyz="0.0 0.0 0.0" rpy="0 0.4887 0"/>   <!-- 28 angle 0.4887hudu -->
          <parent link="platform_1"/>
          <child link="platform_2"/>
        </joint>
        
        <link name="platform_2">
          <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>

              <cylinder length="0.001" radius="0.002"/>
            </geometry>
          </collision>
          <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
              <cylinder length="0.001" radius="0.002"/>
            </geometry>
          </visual>
          <inertial>
            <mass value="1e-5" />
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
          </inertial>
        </link>

        <!-- rplidar sensor for simulation -->
        <!-- <xacro:kinectv1 parent="platform_2" /> -->
        <xacro:sensor_kinect parent="platform_2"/>

        <transmission name="transmission_neck">
          <type>transmission_interface/SimpleTransmission</type>
          <joint name="joint_neck_1">
            <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>  
          </joint>
          <actuator name="motor_neck"> 
            <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
            <mechanicalReduction>1</mechanicalReduction>
          </actuator>
        </transmission>

      
        <gazebo>
          <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
              <robotNamespace>/neck</robotNamespace>
          </plugin>
        </gazebo>
  
  </xacro:macro>
  
</robot>


